{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\build-youtube-final-code\\\\client\\\\src\\\\components\\\\UploadVideo.js\";\nimport path from \"path\";\nimport React from \"react\";\nimport { useSnackbar } from \"react-simple-snackbar\";\nimport { uploadMedia } from \"../utils/upload-media\";\nimport { UploadIcon } from \"./Icons\";\nimport UploadVideoModal from \"./UploadVideoModal\";\n\nfunction UploadVideo() {\n  const [showModal, setShowModal] = React.useState(false);\n  const [previewVideo, setPreviewVideo] = React.useState(\"\");\n  const [thumbnail, setThumbnail] = React.useState(\"\");\n  const [defaultTitle, setDefaultTitle] = React.useState(\"\");\n  const [url, setUrl] = React.useState(\"\");\n  const [openSnackbar] = useSnackbar();\n\n  const closeModal = () => setShowModal(false);\n\n  async function handleUploadVideo(event) {\n    event.persist();\n    const file = event.target.files[0];\n    const defaultTitle = path.basename(file.name, path.extname(file.name));\n    setDefaultTitle(defaultTitle);\n\n    if (file) {\n      const fileSize = file.size / 1000000;\n\n      if (fileSize > 50) {\n        return openSnackbar(\"Video file should be less than 50MB\");\n      }\n\n      const previewVideo = URL.createObjectURL(file);\n      setPreviewVideo(previewVideo);\n      setShowModal(true);\n      const url = await uploadMedia({\n        type: \"video\",\n        file,\n        preset: \"your-video-preset\"\n      });\n      const extension = path.extname(url);\n      setThumbnail(url.replace(extension, \".jpg\"));\n      setUrl(url);\n      event.target.value = \"\";\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"video-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    id: \"video-upload\",\n    type: \"file\",\n    accept: \"video/*\",\n    onChange: handleUploadVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), showModal && /*#__PURE__*/React.createElement(UploadVideoModal, {\n    previewVideo: previewVideo,\n    thumbnail: thumbnail,\n    defaultTitle: defaultTitle,\n    url: url,\n    closeModal: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default UploadVideo;","map":{"version":3,"sources":["C:/Users/User/Desktop/build-youtube-final-code/client/src/components/UploadVideo.js"],"names":["path","React","useSnackbar","uploadMedia","UploadIcon","UploadVideoModal","UploadVideo","showModal","setShowModal","useState","previewVideo","setPreviewVideo","thumbnail","setThumbnail","defaultTitle","setDefaultTitle","url","setUrl","openSnackbar","closeModal","handleUploadVideo","event","persist","file","target","files","basename","name","extname","fileSize","size","URL","createObjectURL","type","preset","extension","replace","value","display"],"mappings":"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","sourcesContent":["import path from \"path\";\nimport React from \"react\";\nimport { useSnackbar } from \"react-simple-snackbar\";\nimport { uploadMedia } from \"../utils/upload-media\";\nimport { UploadIcon } from \"./Icons\";\nimport UploadVideoModal from \"./UploadVideoModal\";\n\nfunction UploadVideo() {\n  const [showModal, setShowModal] = React.useState(false);\n  const [previewVideo, setPreviewVideo] = React.useState(\"\");\n  const [thumbnail, setThumbnail] = React.useState(\"\");\n  const [defaultTitle, setDefaultTitle] = React.useState(\"\");\n  const [url, setUrl] = React.useState(\"\");\n  const [openSnackbar] = useSnackbar();\n\n  const closeModal = () => setShowModal(false);\n\n  async function handleUploadVideo(event) {\n    event.persist();\n    const file = event.target.files[0];\n    const defaultTitle = path.basename(file.name, path.extname(file.name));\n    setDefaultTitle(defaultTitle);\n\n    if (file) {\n      const fileSize = file.size / 1000000;\n\n      if (fileSize > 50) {\n        return openSnackbar(\"Video file should be less than 50MB\");\n      }\n\n      const previewVideo = URL.createObjectURL(file);\n      setPreviewVideo(previewVideo);\n      setShowModal(true);\n      const url = await uploadMedia({\n        type: \"video\",\n        file,\n        preset: \"your-video-preset\",\n      });\n\n      const extension = path.extname(url);\n      setThumbnail(url.replace(extension, \".jpg\"));\n      setUrl(url);\n      event.target.value = \"\";\n    }\n  }\n\n  return (\n    <div>\n      <label htmlFor=\"video-upload\">\n        <UploadIcon />\n      </label>\n      <input\n        style={{ display: \"none\" }}\n        id=\"video-upload\"\n        type=\"file\"\n        accept=\"video/*\"\n        onChange={handleUploadVideo}\n      />\n      {showModal && (\n        <UploadVideoModal\n          previewVideo={previewVideo}\n          thumbnail={thumbnail}\n          defaultTitle={defaultTitle}\n          url={url}\n          closeModal={closeModal}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default UploadVideo;\n"]},"metadata":{},"sourceType":"module"}